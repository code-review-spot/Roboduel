// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Robot = (function(_super) {

    __extends(Robot, _super);

    function Robot() {
      this.move = __bind(this.move, this);

      this.collisionCheck = __bind(this.collisionCheck, this);

      this.step = __bind(this.step, this);
      return Robot.__super__.constructor.apply(this, arguments);
    }

    Robot.prototype.defaults = {
      dir: 0,
      hp: 100,
      maxHP: 1,
      attack: 5,
      name: "robot",
      x: 0,
      y: 0,
      dx: 0,
      dy: 0,
      frequency: 1000 / 15,
      arena: {
        width: 600,
        height: 600
      },
      width: 40,
      height: 40
    };

    Robot.prototype.initialize = function() {
      if (!this.attributes.hp) {
        this.set('hp', defaults["hp"]);
      }
      if (!this.attributes.script) {
        this.set('script', ["move", "move", "move", "move", "left", "fire", "idle"]);
      }
      return this.set('lineNum', 0);
    };

    Robot.prototype.maxX = function() {
      return this.attributes.arena.width - this.attributes.width;
    };

    Robot.prototype.minX = function() {
      return 0;
    };

    Robot.prototype.maxY = function() {
      return this.attributes.arena.height - this.attributes.height;
    };

    Robot.prototype.minY = function() {
      return 0;
    };

    Robot.prototype.deg = function() {
      return this.attributes.dir * 360 / Math.TAO;
    };

    Robot.prototype.centerX = function() {
      return this.attributes.x + this.attributes.width / 2;
    };

    Robot.prototype.centerY = function() {
      return this.attributes.y + this.attributes.height / 2;
    };

    Robot.prototype.noisy = false;

    Robot.prototype.die = function() {
      if (this.noisy) {
        console.log("" + this.attributes.name + " has died");
      }
      clearInterval(this.intervalID);
      return this.destroy();
    };

    Robot.prototype.start = function() {
      var _this = this;
      return this.intervalID = setInterval(function() {
        return _this.step();
      }, this.frequency);
    };

    Robot.prototype.step = function() {
      var command;
      this.collisionCheck();
      command = this.attributes.script[this.attributes.lineNum];
      if (this[command]) {
        this[command]();
      }
      if (this.noisy) {
        console.log("from Step()", this.attributes);
      }
      return this.attributes.lineNum = (this.attributes.lineNum + 1) % this.attributes.script.length;
    };

    Robot.prototype.collisionCheck = function() {
      var _this = this;
      return window.silo.each(function(missile) {
        var mBottom, mLeft, mRight, mTop, rBottom, rLeft, rRight, rTop;
        mLeft = missile.get('x') + missile.dx() * 2;
        mRight = missile.get('x') + missile.get('width') + missile.dx() * 2;
        rLeft = _this.get('x');
        rRight = _this.get('x') + _this.get('width');
        mTop = missile.get('y') + missile.dy() * 2;
        mBottom = missile.get('y') + missile.get('height') + missile.dy() * 2;
        rTop = _this.get('y');
        rBottom = _this.get('y') + _this.get('height');
        if ((mRight > rLeft) && (mLeft < rRight) && (mTop < rBottom) && (mBottom > rTop)) {
          if (_this.noisy) {
            console.log([mLeft, mRight, mTop, mBottom]);
          }
          return _this.takeDamage(missile.get('damage'));
        }
      });
    };

    Robot.prototype.takeDamage = function(damage) {
      this.set('hp', this.attributes.hp - damage);
      this.trigger('damage');
      if (this.attributes.hp < 0) {
        return this.die();
      }
    };

    Robot.prototype.move = function() {
      var dx, dy, newx, newy;
      dx = Math.cos(this.get('dir'));
      dy = Math.sin(this.get('dir'));
      newx = this.attributes.x + dx;
      if (newx > this.maxX()) {
        newx = this.maxX();
      }
      if (newx < this.minX()) {
        newx = this.minX();
      }
      newy = this.attributes.y + dy;
      if (newy > this.maxY()) {
        newy = this.maxY();
      }
      if (newy < this.minY()) {
        newy = this.minY();
      }
      this.set('x', newx);
      this.set('y', newy);
      if (this.noisy) {
        return console.log("from Step()", this.attributes);
      }
    };

    Robot.prototype.right = function() {
      this.set('dir', (this.attributes.dir + 0.03) % Math.TAO);
      this.set('dx', Math.cos(this.get('dir')));
      return this.set('dy', Math.sin(this.get('dir')));
    };

    Robot.prototype.left = function() {
      this.set('dir', (Math.TAO + this.attributes.dir - 0.03) % Math.TAO);
      this.set('dx', Math.cos(this.get('dir')));
      return this.set('dy', Math.sin(this.get('dir')));
    };

    Robot.prototype.fire = function() {
      var missile, missileView, mult;
      mult = 20;
      missile = new Missile({
        id: this.missile,
        x: this.get('x') + this.get('width') / 2 + Math.cos(this.get('dir')) * mult,
        y: this.get('y') + this.get('height') / 2 + Math.sin(this.get('dir')) * mult,
        dir: this.get('dir'),
        damage: this.attack
      });
      missileView = new MissileView({
        model: missile
      });
      return window.silo.add(missile);
    };

    Robot.prototype.idle = function() {
      return this;
    };

    return Robot;

  })(Backbone.Model);

  window.RobotView = (function(_super) {

    __extends(RobotView, _super);

    function RobotView() {
      this.initialize = __bind(this.initialize, this);
      return RobotView.__super__.constructor.apply(this, arguments);
    }

    RobotView.prototype.className = 'robot';

    RobotView.prototype.initialize = function() {
      console.log(this.model);
      this.listenTo(this.model, 'change', this.render);
      this.listenTo(this.model, 'damage', this.blink);
      return this.listenTo(this.model, 'destroy', this.remove);
    };

    RobotView.prototype.blink = function() {
      var _this = this;
      this.$el.addClass('damage');
      return setTimeout((function() {
        return _this.$el.removeClass('damage');
      }), 10);
    };

    RobotView.prototype.render = function() {
      this.$el.css("left", this.model.get('x'));
      this.$el.css("top", this.model.get('y'));
      this.$el.css("transform", "rotate(" + this.model.deg() + "deg)");
      this.$el.appendTo('.arena');
      return this;
    };

    return RobotView;

  })(Backbone.View);

  window.RobotCommandView = (function(_super) {

    __extends(RobotCommandView, _super);

    function RobotCommandView() {
      return RobotCommandView.__super__.constructor.apply(this, arguments);
    }

    RobotCommandView.prototype.className = 'commands';

    RobotCommandView.prototype.events = {
      'click .editButton': 'toggleView'
    };

    RobotCommandView.prototype.initialize = function() {
      this.listenTo(this.model, 'change:script', this.render);
      this.listenTo(this.model, 'destroy', this.remove);
      $('.rightbar').append(this.$el);
      return this.render();
    };

    RobotCommandView.prototype.toggleView = function() {
      if (this.display === "standard") {
        this.renderInput();
      } else if (this.display === "input") {
        this.model.set('script', this.$('textarea').val().split("\n"));
        this.render();
      }
      return console.log("" + this.display + " display");
    };

    RobotCommandView.prototype.render = function() {
      var x, _i, _len, _ref;
      this.$el.html('<div class="editButton">Edit</div>');
      this.$el.append('<h3 class="heading">' + ("" + (this.model.get('name')) + "'s control program</h3>"));
      this.$el.append("<ol>");
      _ref = this.model.get('script');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        this.$el.append("<li>" + x + "</li>");
      }
      this.$el.append("</ol>");
      this.display = 'standard';
      return this;
    };

    RobotCommandView.prototype.renderInput = function() {
      var area, x, _i, _len, _ref;
      this.$el.html('<div class="editButton">Done</div>');
      this.$el.append('<h3 class="heading">' + ("" + (this.model.get('name')) + "'s control program</h3>"));
      area = '<textarea>';
      _ref = this.model.get('script');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        area += "\n" + x;
      }
      this.$el.append(area + '</textarea>');
      this.display = 'input';
      return this;
    };

    return RobotCommandView;

  })(Backbone.View);

}).call(this);
